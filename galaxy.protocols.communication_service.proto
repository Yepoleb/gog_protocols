syntax = "proto2";

package galaxy.protocols.communication_service

message AbortStorageSynchronizationRequest {
    optional uint32_t client_id = 1;
}

message AuthInfoRequest {
    optional uint32_t client_id = 1;
    optional uint32_t client_secret = 2;
    optional uint32_t platform_type = 3;
    optional uint32_t steam_ticket = 4;
    optional uint32_t game_pid = 5;
}

message AuthInfoResponse {
    optional uint32_t refresh_token = 1;
    optional uint32_t environment_type = 2;
    optional uint32_t user_id = 3;
    optional uint32_t user_name = 4;
    optional uint32_t region = 5;
}

message AuthStateChangeNotification {
    optional uint32_t refresh_token = 1;
}

message ClearUserAchievementRequest {
    optional uint32_t achievement_id = 1;
}

message ConfigureEnvironmentRequest {
    optional uint32_t environment_type = 1;
    optional uint32_t region = 2;
}

message CreateLeaderboardRequest {
    optional uint32_t key = 1;
    optional uint32_t name = 2;
    optional uint32_t sort_method = 3;
    optional uint32_t display_type = 4;
}

message CreateLeaderboardResponse {
    optional uint32_t leaderboard_id = 1;
}

message GetCachedUserAchievementsRequest {
    optional uint32_t client_id = 1;
}

message GetGlobalStatsRequest {
    optional uint32_t days = 1;
}

message GetGlobalStatsResponse {
    optional uint32_t global_stats = 1;
}

message GetGlobalStatsResponse_GlobalStat {
    optional uint32_t stat_id = 1;
    optional uint32_t key = 2;
    optional uint32_t value_type = 3;
    optional uint32_t float_value = 4;
    optional uint32_t int_value = 5;
    optional uint32_t window_size = 6;
}

message GetLeaderboardEntriesAroundUserRequest {
    optional uint32_t leaderboard_id = 1;
    optional uint32_t user_id = 2;
    optional uint32_t count_before = 3;
    optional uint32_t count_after = 4;
}

message GetLeaderboardEntriesForUsersRequest {
    optional uint32_t leaderboard_id = 1;
    optional uint32_t user_ids = 2;
}

message GetLeaderboardEntriesGlobalRequest {
    optional uint32_t leaderboard_id = 1;
    optional uint32_t range_start = 2;
    optional uint32_t range_end = 3;
}

message GetLeaderboardEntriesResponse {
    optional uint32_t leaderboard_entries = 1;
    optional uint32_t leaderboard_entry_total_count = 2;
}

message GetLeaderboardEntriesResponse_LeaderboardEntry {
    optional uint32_t rank = 1;
    optional uint32_t score = 2;
    optional uint32_t user_id = 3;
    optional uint32_t details = 4;
}

message GetLeaderboardsByKeyRequest {
    optional uint32_t key = 1;
}

message GetLeaderboardsResponse {
    optional uint32_t leaderboard_definitions = 1;
}

message GetLeaderboardsResponse_LeaderboardDefinition {
    optional uint32_t leaderboard_id = 1;
    optional uint32_t key = 2;
    optional uint32_t name = 3;
    optional uint32_t sort_method = 4;
    optional uint32_t display_type = 5;
}

message GetUserAchievementsRequest {
    optional uint32_t user_id = 1;
}

message GetUserAchievementsResponse {
    optional uint32_t user_achievements = 1;
    optional uint32_t language = 2;
    optional uint32_t achievements_mode = 3;
}

message GetUserAchievementsResponse_UserAchievement {
    optional uint32_t achievement_id = 1;
    optional uint32_t key = 2;
    optional uint32_t name = 3;
    optional uint32_t description = 4;
    optional uint32_t image_url_locked = 5;
    optional uint32_t image_url_unlocked = 6;
    optional uint32_t visible_while_locked = 7;
    optional uint32_t unlock_time = 8;
    optional uint32_t rarity = 9;
    optional uint32_t rarity_level_description = 10;
    optional uint32_t rarity_level_slug = 11;
}

message GetUserStatsRequest {
    optional uint32_t user_id = 1;
}

message GetUserStatsResponse {
    optional uint32_t user_stats = 1;
}

message GetUserStatsResponse_UserStat {
    optional uint32_t stat_id = 1;
    optional uint32_t key = 2;
    optional uint32_t value_type = 3;
    optional uint32_t float_value = 4;
    optional uint32_t int_value = 5;
    optional uint32_t window_size = 6;
    optional uint32_t float_default_value = 7;
    optional uint32_t int_default_value = 8;
    optional uint32_t float_min_value = 9;
    optional uint32_t int_min_value = 10;
    optional uint32_t float_max_value = 11;
    optional uint32_t int_max_value = 12;
    optional uint32_t float_max_change = 13;
    optional uint32_t int_max_change = 14;
    optional uint32_t increment_only = 15;
}

message GetUserTimePlayedRequest {
    optional uint32_t user_id = 1;
}

message GetUserTimePlayedResponse {
    optional uint32_t time_played = 1;
}

message LibraryInfoRequest {
    optional uint32_t bitness = 1;
    optional uint32_t compiler_type = 2;
    optional uint32_t compiler_version = 3;
}

message LibraryInfoResponse {
    optional uint32_t location = 1;
    optional uint32_t update_status = 2;
}

message OverlayStateChangeNotification {
    optional uint32_t overlay_state = 1;
}

message SetLeaderboardScoreRequest {
    optional uint32_t leaderboard_id = 1;
    optional uint32_t score = 2;
    optional uint32_t force_update = 3;
    optional uint32_t details = 4;
}

message SetLeaderboardScoreResponse {
    optional uint32_t score = 1;
    optional uint32_t old_rank = 2;
    optional uint32_t new_rank = 3;
    optional uint32_t leaderboard_entry_total_count = 4;
}

message ShareFileRequest {
    optional uint32_t filename = 1;
}

message ShareFileResponse {
    optional uint32_t file_handle = 1;
}

message StartGameSessionRequest {
    optional uint32_t game_pid = 1;
    optional uint32_t overlay_support = 2;
}

message StartOverlaySessionRequest {
    optional uint32_t game_pid = 1;
}

message StartStorageSynchronizationRequest {
    optional uint32_t locations = 1;
    optional uint32_t client_id = 2;
    optional uint32_t client_secret = 3;
    optional uint32_t installation_id = 4;
    optional uint32_t synchronization_policy = 5;
    optional uint32_t synchronization_modifier_flags = 6;
}

message StartStorageSynchronizationRequest_StorageLocation {
    optional uint32_t name = 1;
    optional uint32_t path = 2;
}

message StorageSynchronizationFailureNotification {
    optional uint32_t client_id = 2;
    optional uint32_t failure_reason = 3;
    optional uint32_t conflict_details = 4;
    optional uint32_t quota_exceeded_details = 5;
}

message StorageSynchronizationFailureNotification_ConflictDetails {
    optional uint32_t local_storage_last_modified_time = 1;
    optional uint32_t remote_storage_last_modified_time = 2;
}

message StorageSynchronizationFailureNotification_QuotaExceededDetails {
    optional uint32_t quota_bytes = 1;
    optional uint32_t quota_used_bytes = 2;
    optional uint32_t required_bytes = 3;
    optional uint32_t required_uploads = 4;
}

message StorageSynchronizationProgressNotification {
    optional uint32_t progress_fraction_numerator = 1;
    optional uint32_t progress_fraction_denominator = 2;
    optional uint32_t client_id = 3;
}

message StorageSynchronizationSuccessNotification {
    optional uint32_t client_id = 2;
}

message UnlockUserAchievementRequest {
    optional uint32_t achievement_id = 1;
    optional uint32_t time = 2;
}

message UpdateUserStatRequest {
    optional uint32_t stat_id = 1;
    optional uint32_t value_type = 2;
    optional uint32_t float_value = 3;
    optional uint32_t int_value = 4;
}

